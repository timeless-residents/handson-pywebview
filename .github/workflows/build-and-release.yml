name: Build and Release PyWebview App

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            asset_name: launcher-macos.zip
          - os: windows-latest
            asset_name: launcher-windows.zip

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies (Common)
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pywebview
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -f requirements-macos.txt ]; then pip install -r requirements-macos.txt; fi
        shell: bash

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path -Path requirements-windows.txt -PathType Leaf) {
            pip install -r requirements-windows.txt
          }
        shell: pwsh

      # macOS用のビルド（--osx-bundle-identifier を指定）
      - name: Build with PyInstaller (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --clean --onedir --windowed --noconfirm \
            --osx-bundle-identifier "handson.pywebview.launcher" \
            --add-data "showroom:showroom" launcher.py
          ls -la dist/
        shell: bash

      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --clean --onedir --windowed --noconfirm \
            --add-data "showroom;showroom" launcher.py
          dir dist

      # macOS用証明書のインストールと設定
      - name: Install Apple Certificate
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 証明書をデコードして保存
          echo $APPLE_CERTIFICATE_BASE64 | base64 --decode > certificate.p12

          # 新しいキーチェーンの作成と設定
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # 証明書のインポート（codesign 用に登録）
          security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD build.keychain

          # 証明書の確認
          security find-identity -v build.keychain

      # macOSアプリに署名（正しい Info.plist などが設定されていることを前提）
      - name: Sign macOS Application
        if: matrix.os == 'macos-latest'
        env:
          APPLE_DEVELOPER_IDENTITY: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
        run: |
          # 利用可能な証明書を確認
          security find-identity -v build.keychain

          # キーチェーン内から Developer ID Application を抽出して署名（なければ secrets の値を使用）
          IDENTITY=$(security find-identity -v build.keychain | grep "Developer ID Application" | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -n "$IDENTITY" ]; then
            echo "Using identity: $IDENTITY"
            /usr/bin/codesign --force --options runtime --sign "$IDENTITY" --deep dist/launcher.app
          else
            echo "Using identity from secrets: $APPLE_DEVELOPER_IDENTITY"
            /usr/bin/codesign --force --options runtime --sign "$APPLE_DEVELOPER_IDENTITY" --deep dist/launcher.app
          fi

          # 署名の検証
          codesign -vvv --deep --strict dist/launcher.app

      # macOSアプリの公証プロセス
      - name: Notarize macOS Application
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # アプリを zip 圧縮
          ditto -c -k --keepParent dist/launcher.app launcher.zip

          # 公証プロセスの実行（--wait で完了まで待機）
          xcrun notarytool submit launcher.zip --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait

          # 公証スタンプの適用
          xcrun stapler staple dist/launcher.app

          # 公証確認
          xcrun stapler validate dist/launcher.app

      # ZIP アーカイブの作成（macOS）
      - name: Create ZIP archive (macOS)
        if: matrix.os == 'macos-latest' && success()
        run: |
          cd dist
          zip -r ../${{ matrix.asset_name }} launcher.app

      # ZIP アーカイブの作成（Windows）
      - name: Create ZIP archive (Windows)
        if: matrix.os == 'windows-latest' && success()
        run: |
          Compress-Archive -Path dist/launcher -DestinationPath ${{ matrix.asset_name }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && success()
        with:
          files: ${{ matrix.asset_name }}
          name: "PyWebview Launcher v${{ github.ref_name }}"
          body: |
            PyWebview Launcher Application v${{ github.ref_name }}

            ## インストール方法
            - Windows: ZIP を解凍し、フォルダ内の `launcher.exe` を実行
            - macOS: ZIP を解凍し、`launcher.app` をダブルクリックで実行

            ## 特徴
            - 高速起動のためのパフォーマンス最適化
            - Apple Developer ID による正式署名済み（警告なしで実行可能）
            - マルチプラットフォーム対応
